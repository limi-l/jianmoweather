plugins {
    alias libs.plugins.android.application
    alias libs.plugins.kotlin.android
    alias libs.plugins.google.ksp
    alias libs.plugins.kotlin.kapt
    alias libs.plugins.google.hilt
}

def keystorePropertiesFile = rootProject.file("keystore/keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    namespace 'dev.shuanghua.weather'
    compileSdk compile

    defaultConfig {
        applicationId "dev.shuanghua.weather"
        minSdk min
        targetSdk target
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    packagingOptions {
        // Exclude AndroidX version files
        exclude 'META-INF/*.version'
        // Exclude consumer proguard files
        exclude 'META-INF/proguard/*'
        // Exclude the other random properties files
        exclude '/*.properties'
        exclude 'META-INF/*.properties'
    }

    signingConfigs {
        release {
            storeFile rootProject.file("keystore/shuanghua.jks")
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storePassword keystoreProperties['storePassword']
        }

        debug {
            storeFile rootProject.file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    lintOptions {
        abortOnError false
        checkGeneratedSources = true
        checkReleaseBuilds false
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.androidxComposeCompiler.get()
    }

    kapt {
        correctErrorTypes = true
    }
}

dependencies {

    implementation project(':shared')

    implementation project(':ui-weather')
    implementation project(':ui-favorites')
    implementation project(':ui-more')
    implementation project(':ui-province')
    implementation project(':ui-city')
    implementation project(':ui-district')
    implementation project(':ui-station')
    implementation project(':ui-setting')
    implementation project(':ui-web')

    implementation project(':data-android')
    implementation project(':common-ui-compose')
    implementation project(':core-ui')
    implementation project(':core-navigation')
    implementation project(':data-datastore')

//    implementation libs.androidx.dataStore.core
//    implementation libs.protobuf.kotlin.lite

    testImplementation libs.junit.ext


    // activity
    implementation libs.androidx.activity.compose

    // hilt
    implementation libs.hilt.android
    implementation libs.hilt.compose.navigation
    kapt libs.hilt.compiler

    // style-material3
    implementation libs.style.material3

    // accompanist
    implementation libs.accompanist.permissions
    implementation libs.accompanist.navigation.animation

    // Room
    implementation libs.androidx.room.runtime
    implementation libs.androidx.room.ktx
    ksp libs.androidx.room.compiler

    // timber
    implementation libs.timber

    // ali location
    implementation libs.ali.location

    // retrofit
    implementation libs.retrofit
    implementation libs.retrofit.converter.moshi

    // json converter
    implementation libs.moshi
    ksp libs.moshi.kotlin.codegen
    kspTest libs.moshi.kotlin.codegen

    // okhttp logging interceptor
    implementation libs.okhttp.logging.interceptor
}